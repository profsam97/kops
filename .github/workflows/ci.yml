name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  IMAGE_NAME: 154114/fastapi-service

jobs:
  # Code quality checks
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r production-deployment/app/requirements.txt
        pip install pytest black flake8

    - name: Code formatting check
      run: |
        cd production-deployment/app
        black --check --diff .

    - name: Linting
      run: |
        cd production-deployment/app
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

  # Tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r production-deployment/app/requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      run: |
        cd production-deployment/app
        python -c "
        import pytest
        import asyncio
        from httpx import AsyncClient
        from main import app

        @pytest.mark.asyncio
        async def test_health():
            async with AsyncClient(app=app, base_url='http://test') as ac:
                response = await ac.get('/health')
            assert response.status_code == 200
            assert response.json()['status'] == 'healthy'

        @pytest.mark.asyncio 
        async def test_items():
            async with AsyncClient(app=app, base_url='http://test') as ac:
                response = await ac.get('/items')
            assert response.status_code == 200
            assert 'items' in response.json()
        "
        pytest -v

  # Container security scan
  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build Docker image
      run: |
        docker build -t ${{ env.IMAGE_NAME }}:scan -f production-deployment/Dockerfile production-deployment/

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.IMAGE_NAME }}:scan
        format: 'table'

  # Kubernetes validation
  k8s-validation:
    name: K8s Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Validate Kubernetes manifests
      run: |
        cd production-deployment/k8s
        for file in *.yaml; do
          echo "Validating $file"
          kubectl --dry-run=client apply -f "$file" || echo "Validation failed for $file"
        done

  # Build and push to Docker Hub
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    needs: [code-quality, test, container-security, k8s-validation]
    if: github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: production-deployment/
        file: production-deployment/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max